module fiveb_counter (
	output logic [4:0] count
	,input logic inc, dec, clk, reset
	);

	always_ff @(posedge clk) begin
	
		if (reset)
			count <= 5'b0;
		else if (inc & ~dec)
			count <= count + 5'b1;
		else if (dec & ~inc)
			count <= count - 5'b1;
	
	end
	
endmodule

module fiveb_counter_testbench ();

	logic [4:0] count;
	logic inc, dec, clk, reset;
	
	fiveb_counter dut (.count, .inc, .dec, .clk, .reset);
	
	parameter CLOCK_PERIOD = 100;
	initial begin
		clk <= 0;
		forever  #(CLOCK_PERIOD / 2) clk <= ~clk;
	end

	initial begin
		integer i;
		
		@(posedge clk) reset <= 1;
		@(posedge clk) reset <= 0;
		
		@(posedge clk) inc <= 1;
		for (i = 0; i < 70; i++);
		
		@(posedge clk) inc <= 0;
		
		for (i = 0; i < 10; i++);
		
		@(posedge clk) dec <= 
		
		$stop;
	end
	
endmodule
